// Code generated by MockGen. DO NOT EDIT.
// Source: quietlog.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockQuieter is a mock of Quieter interface
type MockQuieter struct {
	ctrl     *gomock.Controller
	recorder *MockQuieterMockRecorder
}

// MockQuieterMockRecorder is the mock recorder for MockQuieter
type MockQuieterMockRecorder struct {
	mock *MockQuieter
}

// NewMockQuieter creates a new mock instance
func NewMockQuieter(ctrl *gomock.Controller) *MockQuieter {
	mock := &MockQuieter{ctrl: ctrl}
	mock.recorder = &MockQuieterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQuieter) EXPECT() *MockQuieterMockRecorder {
	return m.recorder
}

// Quiet mocks base method
func (m *MockQuieter) Quiet() bool {
	ret := m.ctrl.Call(m, "Quiet")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Quiet indicates an expected call of Quiet
func (mr *MockQuieterMockRecorder) Quiet() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Quiet", reflect.TypeOf((*MockQuieter)(nil).Quiet))
}

// MockPrintfer is a mock of Printfer interface
type MockPrintfer struct {
	ctrl     *gomock.Controller
	recorder *MockPrintferMockRecorder
}

// MockPrintferMockRecorder is the mock recorder for MockPrintfer
type MockPrintferMockRecorder struct {
	mock *MockPrintfer
}

// NewMockPrintfer creates a new mock instance
func NewMockPrintfer(ctrl *gomock.Controller) *MockPrintfer {
	mock := &MockPrintfer{ctrl: ctrl}
	mock.recorder = &MockPrintferMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPrintfer) EXPECT() *MockPrintferMockRecorder {
	return m.recorder
}

// Printf mocks base method
func (m *MockPrintfer) Printf(format string, v ...interface{}) {
	varargs := []interface{}{format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Printf", varargs...)
}

// Printf indicates an expected call of Printf
func (mr *MockPrintferMockRecorder) Printf(format interface{}, v ...interface{}) *gomock.Call {
	varargs := append([]interface{}{format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Printf", reflect.TypeOf((*MockPrintfer)(nil).Printf), varargs...)
}

// MockFatalfer is a mock of Fatalfer interface
type MockFatalfer struct {
	ctrl     *gomock.Controller
	recorder *MockFatalferMockRecorder
}

// MockFatalferMockRecorder is the mock recorder for MockFatalfer
type MockFatalferMockRecorder struct {
	mock *MockFatalfer
}

// NewMockFatalfer creates a new mock instance
func NewMockFatalfer(ctrl *gomock.Controller) *MockFatalfer {
	mock := &MockFatalfer{ctrl: ctrl}
	mock.recorder = &MockFatalferMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFatalfer) EXPECT() *MockFatalferMockRecorder {
	return m.recorder
}

// Fatalf mocks base method
func (m *MockFatalfer) Fatalf(format string, v ...interface{}) {
	varargs := []interface{}{format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatalf", varargs...)
}

// Fatalf indicates an expected call of Fatalf
func (mr *MockFatalferMockRecorder) Fatalf(format interface{}, v ...interface{}) *gomock.Call {
	varargs := append([]interface{}{format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatalf", reflect.TypeOf((*MockFatalfer)(nil).Fatalf), varargs...)
}

// MockLogger is a mock of Logger interface
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Printf mocks base method
func (m *MockLogger) Printf(format string, v ...interface{}) {
	varargs := []interface{}{format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Printf", varargs...)
}

// Printf indicates an expected call of Printf
func (mr *MockLoggerMockRecorder) Printf(format interface{}, v ...interface{}) *gomock.Call {
	varargs := append([]interface{}{format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Printf", reflect.TypeOf((*MockLogger)(nil).Printf), varargs...)
}

// Fatalf mocks base method
func (m *MockLogger) Fatalf(format string, v ...interface{}) {
	varargs := []interface{}{format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatalf", varargs...)
}

// Fatalf indicates an expected call of Fatalf
func (mr *MockLoggerMockRecorder) Fatalf(format interface{}, v ...interface{}) *gomock.Call {
	varargs := append([]interface{}{format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatalf", reflect.TypeOf((*MockLogger)(nil).Fatalf), varargs...)
}
